import{_ as s,c as i,o as a,a4 as e}from"./chunks/framework.CPs9Ukbn.js";const u=JSON.parse('{"title":"Docker容器","description":"","frontmatter":{},"headers":[],"relativePath":"programming/expand/docker/Docker容器.md","filePath":"programming/expand/docker/Docker容器.md","lastUpdated":1715075190000}'),l={name:"programming/expand/docker/Docker容器.md"},n=e(`<h1 id="docker容器" tabindex="-1">Docker容器 <a class="header-anchor" href="#docker容器" aria-label="Permalink to &quot;Docker容器&quot;">​</a></h1><h2 id="初识docker" tabindex="-1">初识Docker <a class="header-anchor" href="#初识docker" aria-label="Permalink to &quot;初识Docker&quot;">​</a></h2><h3 id="什么是docker" tabindex="-1">什么是Docker <a class="header-anchor" href="#什么是docker" aria-label="Permalink to &quot;什么是Docker&quot;">​</a></h3><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一 个可移植的镜像(images)中，然后发布到任何流行的 Linux或Windows操作系统的 机器上，也可以实现虚拟化。</p><p>容器(container)是完全使用沙箱(sandbox)机制，相互之间不会有任何接口。</p><p><img src="https://s2.loli.net/2024/04/06/KkDlBsXJUQTCeuw.png" alt="docker"></p><h3 id="镜像和容器" tabindex="-1">镜像和容器 <a class="header-anchor" href="#镜像和容器" aria-label="Permalink to &quot;镜像和容器&quot;">​</a></h3><p>Docker中有两个重要的概念：</p><p><strong>镜像(Image)：</strong> Docker将应用程序及其所需的依赖、函数库、环境、配置等文件 打包在一起，称为镜像。</p><p><strong>容器(Container)：<strong>镜像中的应用程序运行后形成的进程就是</strong>容器</strong>，只是Docker 会给容器进程做隔离，对外不可见。</p><p>例如你下载了一个QQ，如果我们将QQ在磁盘上的运行文件及其运行的操作系统依赖打包，形成QQ镜像。然后你可以启动一个，双开、三开QQ，每次开启的QQ都是一个容器。</p><h3 id="dockerhub" tabindex="-1">DockerHub <a class="header-anchor" href="#dockerhub" aria-label="Permalink to &quot;DockerHub&quot;">​</a></h3><p>开源应用程序非常多，打包这些应用往往是重复的劳动。为了避免这些重复劳动， 人们就会将自己打包的应用镜像，例如Redis、 MySQL镜像放到网络上，共享使用， 就像GitHub的代码共享一样。</p><p>Docker镜像地址： [<a href="https://hub.docker.com/" target="_blank" rel="noreferrer">Docker Hub Container Image Library | App Containerization</a>](<a href="https://hub.docker.com/" target="_blank" rel="noreferrer">https://hub.docker.com/</a>)</p><blockquote><h4 id="提示" tabindex="-1">提示 <a class="header-anchor" href="#提示" aria-label="Permalink to &quot;提示&quot;">​</a></h4><p>由于Docker镜像仓库的DNS被污染，导致Docker镜像仓库无法访问。使用国 内镜像加速可解决无法访问问题。阿里云官网提供了镜像加速，网址如下：</p><p><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors" target="_blank" rel="noreferrer">容器镜像服务 (aliyun.com)</a></p></blockquote><h4 id="ubuntu的docker镜像加速" tabindex="-1">Ubuntu的Docker镜像加速 <a class="header-anchor" href="#ubuntu的docker镜像加速" aria-label="Permalink to &quot;Ubuntu的Docker镜像加速&quot;">​</a></h4><p>==下面的代码在终端执行，其中内容是要一行一行写入==</p><p><img src="https://s2.loli.net/2024/04/06/aWNMTLV1Bu2Ir7Z.png" alt="Ubuntu的Docker镜像加速"></p><h4 id="mac的docker镜像加速" tabindex="-1">Mac的Docker镜像加速 <a class="header-anchor" href="#mac的docker镜像加速" aria-label="Permalink to &quot;Mac的Docker镜像加速&quot;">​</a></h4><p><img src="https://s2.loli.net/2024/04/06/MgBskTafFbtPqo8.png" alt="Mac的Docker镜像加速"></p><h4 id="windows的docker镜像加速" tabindex="-1">Windows的Docker镜像加速 <a class="header-anchor" href="#windows的docker镜像加速" aria-label="Permalink to &quot;Windows的Docker镜像加速&quot;">​</a></h4><p><img src="https://s2.loli.net/2024/04/06/DkodgtPOl21HBMw.png" alt="Windows的Docker镜像加速"></p><h2 id="镜像操作" tabindex="-1">镜像操作 <a class="header-anchor" href="#镜像操作" aria-label="Permalink to &quot;镜像操作&quot;">​</a></h2><h3 id="镜像名称" tabindex="-1">镜像名称 <a class="header-anchor" href="#镜像名称" aria-label="Permalink to &quot;镜像名称&quot;">​</a></h3><p>首先来看下镜像的名称组成：</p><ul><li>镜像名称一般分两部分组成：<code>[repository]:[tag]</code>。</li><li>在没有指定<code>tag</code>时，默认是<code>latest</code>，代表最新版本的镜像</li></ul><p>例如：<code>mysql:5.7 </code></p><p>这里的mysql就是repository，5.7就是tag，合一起就是镜像名称，代表5.7版本的MySQL镜像。</p><h3 id="镜像命令" tabindex="-1">镜像命令 <a class="header-anchor" href="#镜像命令" aria-label="Permalink to &quot;镜像命令&quot;">​</a></h3><p>常见的镜像操作命令如图：</p><p>docker镜像操作命令</p><p><img src="https://s2.loli.net/2024/04/06/jzROplHf4GWeXc3.png" alt="docker镜像操作命令"></p><h4 id="常用的镜像命令" tabindex="-1">常用的镜像命令 <a class="header-anchor" href="#常用的镜像命令" aria-label="Permalink to &quot;常用的镜像命令&quot;">​</a></h4><p><code>docker images</code>查看镜像</p><p><code>docker rmi</code>删除镜像</p><p><code>docker push</code>推送镜像到服务器</p><p><code>docker pull</code>从服务器拉取镜像</p><p><code>docker save</code>保存镜像为压缩包</p><p><code>docker load</code>加载压缩包为镜像</p><h3 id="拉取、查看镜像" tabindex="-1">拉取、查看镜像 <a class="header-anchor" href="#拉取、查看镜像" aria-label="Permalink to &quot;拉取、查看镜像&quot;">​</a></h3><p>从DockerHub中拉取一个nginx镜像并查看</p><ol><li><p>首先查看docker中已经安装的镜像</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> images</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>根据查看到的镜像名称，拉取自己需要的镜像</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>通过命令：docker images 查看拉取到的镜像</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> images</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ol><h3 id="保存、导入镜像" tabindex="-1">保存、导入镜像 <a class="header-anchor" href="#保存、导入镜像" aria-label="Permalink to &quot;保存、导入镜像&quot;">​</a></h3><p>利用docker save将nginx镜像导出磁盘，然后再通过load加载回来</p><h4 id="查看命令语法结构" tabindex="-1">查看命令语法结构 <a class="header-anchor" href="#查看命令语法结构" aria-label="Permalink to &quot;查看命令语法结构&quot;">​</a></h4><p>利用<code>docker xx --help</code>命令查看<code>docker save</code>和<code>docker load</code>的语法</p><p>例如，查看save命令用法，可以输入命令：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> save</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --help</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令格式：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> save</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [保存的目标文件名称] [镜像名称]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="使用docker-save导出镜像到磁盘" tabindex="-1">使用docker save导出镜像到磁盘 <a class="header-anchor" href="#使用docker-save导出镜像到磁盘" aria-label="Permalink to &quot;使用docker save导出镜像到磁盘&quot;">​</a></h4><p>运行命令：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> save</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx.tar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx:latest</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="使用docker-load加载镜像" tabindex="-1">使用docker load加载镜像 <a class="header-anchor" href="#使用docker-load加载镜像" aria-label="Permalink to &quot;使用docker load加载镜像&quot;">​</a></h4><p>先删除本地的nginx镜像：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rmi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx:latest</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后运行命令，加载本地文件：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> load</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx.tar</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="容器操作" tabindex="-1">容器操作 <a class="header-anchor" href="#容器操作" aria-label="Permalink to &quot;容器操作&quot;">​</a></h2><h3 id="容器相关命令" tabindex="-1">容器相关命令 <a class="header-anchor" href="#容器相关命令" aria-label="Permalink to &quot;容器相关命令&quot;">​</a></h3><p>容器操作的命令如图：</p><p>docker容器操作命令图</p><p><img src="https://s2.loli.net/2024/04/06/lsfmbkjqNRaEdTU.png" alt="docker容器操作命令图"></p><p>容器保护三个状态：</p><ul><li>运行：进程正常运行</li><li>暂停：进程暂停， CPU不再运行，并不释放内存</li><li>停止：进程终止，回收进程占用的内存、 CPU等资源</li></ul><p>其中：</p><ul><li><code>docker run</code>：创建并运行一个容器，处于运行状态</li><li><code>docker stop</code>：停止一个运行的容器</li><li><code>docker start</code>：让一个停止的容器再次运行</li><li><code>docker restart</code>：重新启动容器</li><li><code>docker rm</code>：删除一个容器</li><li><code>docker pause</code>：让一个运行的容器暂停</li><li><code>docker unpause</code>：让一个容器从暂停状态恢复运行</li></ul><h3 id="创建并运行容器" tabindex="-1">创建并运行容器 <a class="header-anchor" href="#创建并运行容器" aria-label="Permalink to &quot;创建并运行容器&quot;">​</a></h3><p>创建并运行nginx</p><p>命令语法：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> containerName</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 80:80</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>语法解析：</p><ul><li><code>docker run</code>：创建并运行一个容器</li><li><code>--name</code>: 给容器起的名字，例如叫做ng</li><li><code>-p</code>：将宿主机端口与容器端口映射，冒号左侧是宿主机端口，右侧是容器端口</li><li><code>-d</code>：后台运行容器</li><li><code>nginx</code>：镜像名称，例如nginx</li></ul><p>这里的<code>-p</code>参数，是将容器端口映射到宿主机端口。</p><p>默认情况下，容器是隔离环境，我们直接访问宿主机的80端口，肯定访问不到容器 中的nginx。</p><p>现在，将容器的80与宿主机的80关联起来，当我们访问宿主机的80端口时，就会被 映射到容器的80，这样就能访问到nginx了：</p><p>运行nginx容器</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ng</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8080:80</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx:latest</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>查看运行的容器</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>访问docker容器中的nginx</p><p>打开浏览器，输入docker容器宿主机的ip和nginx的映射端口，例如：<code>http://47.96.10.118:8080</code> ，即可看到结果。</p><p>查看docker容器中的nginx访问日志</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ng</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>持续查看docker容器中的nginx访问日志</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ng</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>停止持续显示访问日志： <code>Ctrl + C</code></p><h2 id="数据卷" tabindex="-1">数据卷 <a class="header-anchor" href="#数据卷" aria-label="Permalink to &quot;数据卷&quot;">​</a></h2><p>问题：</p><p>镜像中包含了应用程序及其所需的依赖、函数库、环境、配置等，还包括了应 用程序的数据。如果在应用程序运行过程中修改了数据，<strong>那么删除镜像后，数据也同时删除了</strong>。</p><p>原因：</p><p>产生这种问题的原因是容器与数据（容器内文件）耦合带来的后果。</p><p>改进：</p><p>要解决这个问题，必须将数据与容器解耦，这就要用到数据卷了。</p><h3 id="什么是数据卷" tabindex="-1">什么是数据卷 <a class="header-anchor" href="#什么是数据卷" aria-label="Permalink to &quot;什么是数据卷&quot;">​</a></h3><p>**数据卷(volume)**是一个虚拟目录，指向宿主机文件系统中的某个目录。</p><p><img src="https://s2.loli.net/2024/04/06/I4lOn1GoBejQkzp.png" alt="docker数据卷"></p><p>一旦完成数据卷挂载，对容器的一切操作都会作用在数据卷对应的宿主机目录了。</p><p>这样，我们操作宿主机的/var/lib/docker/volumes/html目录，就等于操作容器内 的/usr/share/nginx/html目录了</p><h3 id="数据卷操作命令" tabindex="-1">数据卷操作命令 <a class="header-anchor" href="#数据卷操作命令" aria-label="Permalink to &quot;数据卷操作命令&quot;">​</a></h3><p>数据卷操作的基本语法如下：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [COMMAND]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>docker volume</code>命令是数据卷操作，根据命令后跟随的command来确定下一步的操作：</p><ul><li><code>create</code>创建一个volume</li><li><code>inspect</code>显示一个或多个volume的信息</li><li><code>ls</code>列出所有的volume</li><li><code>prune</code>删除未使用的volume</li><li><code>rm</code>删除一个或多个指定的volume</li></ul><h3 id="创建和查看数据卷" tabindex="-1">创建和查看数据卷 <a class="header-anchor" href="#创建和查看数据卷" aria-label="Permalink to &quot;创建和查看数据卷&quot;">​</a></h3><p>创建一个数据卷，并查看数据卷在宿主机的目录位置</p><h4 id="创建数据卷" tabindex="-1">创建数据卷 <a class="header-anchor" href="#创建数据卷" aria-label="Permalink to &quot;创建数据卷&quot;">​</a></h4><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> html</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="查看所有数据卷" tabindex="-1">查看所有数据卷 <a class="header-anchor" href="#查看所有数据卷" aria-label="Permalink to &quot;查看所有数据卷&quot;">​</a></h4><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="查看数据卷详细信息卷" tabindex="-1">查看数据卷详细信息卷 <a class="header-anchor" href="#查看数据卷详细信息卷" aria-label="Permalink to &quot;查看数据卷详细信息卷&quot;">​</a></h4><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> inspect</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> html</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>可以看到，我们创建的html这个数据卷关联的宿主机目录为 /var/lib/docker/volumes/html/_data 目录。</p><h3 id="挂载数据卷" tabindex="-1">挂载数据卷 <a class="header-anchor" href="#挂载数据卷" aria-label="Permalink to &quot;挂载数据卷&quot;">​</a></h3><p>我们在创建容器时，可以通过<code>-v</code>参数来挂载一个数据卷到某个容器内目录，命令格式如下：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ng</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> html:/usr/share/nginx/html</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8080:80</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这里的-v就是挂载数据卷的命令：</p><ul><li><code>-v html:/usr/share/nginx/html</code>：把html数据卷挂载到容器内 的/usr/share/nginx/html这个目录中</li><li>nginx默认网页在nginx中的存储位置就是/usr/share/nginx/html目录</li><li>挂载后，宿主机的/var/lib/docker/volumes/html/_data目录就是nginx的网页目录了，在这个目录中创建网页就可用直接访问了。</li></ul><p>创建网页：</p><p>在/var/lib/docker/volumes/html/_data目录中创建文件index.html</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;en&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Document&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./js/echarts.min.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     hello docker volume</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="给mysql挂载本地目录" tabindex="-1">给MySQL挂载本地目录 <a class="header-anchor" href="#给mysql挂载本地目录" aria-label="Permalink to &quot;给MySQL挂载本地目录&quot;">​</a></h3><p>容器不仅仅可以挂载数据卷，也可以直接挂载到宿主机目录上。关联关系如下：</p><ul><li>带数据卷模式：宿主机目录 ---&gt; 数据卷 ---&gt; 容器内目录</li><li>直接挂载模式：宿主机目录 ---&gt; 容器内目录</li></ul><p>如图：</p><p><img src="https://s2.loli.net/2024/04/06/Lo3jpbI6TVzPEtC.png" alt="docker目录挂载"></p><p><strong>语法：</strong></p><p>目录挂载与数据卷挂载的语法是类似的：</p><ul><li>-v [宿主机目录]:[容器内目录]</li><li>-v [宿主机文件]:[容器内文件]</li></ul><p>**需求：**创建并运行一个MySQL容器，将宿主机目录直接挂载到容器</p><p><strong>步骤：</strong></p><ol><li>mysql.tar文件上传到服务器</li><li>创建目录/usr/mysql/data</li><li>创建目录/usr/mysql/conf</li><li>将提供的hmy.cnf文件上传到/usr/mysql/conf</li><li>挂载/usr/mysql/data到mysql容器内数据存储目录</li><li>挂载/usr/mysql/conf/hmy.cnf到mysql容器的配置文件</li><li>设置MySQL密码</li></ol><p>实现过程如下：</p><ol><li><p>加载mysql镜像</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> load</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysql.tar</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>运行mysql容器</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--name </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mysql</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-e </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">MYSQL_ROOT_PASSWORD=root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-p </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">3309:3306</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-v </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/usr/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-v </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/usr/mysql/data:/var/lib/mysql</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-d </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql:5.7.25</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p><code>hmy.cnf</code>文件里面的内容</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[mysqld]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">skip-name-resolve</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">character_set_server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">utf8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">datadir</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/var/lib/mysql</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server-id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ol><p><code>SqlYog</code>连接docker里的<code>mysql8.0</code>，还需要设置</p><ul><li><p>阿里云的安全组添加3309(你开放的端口)的端口</p></li><li><p>ubuntu的防火墙要允许3309(你开放的端口)端口通信</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ufw</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> status</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ufw</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> allow</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3309</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">你开放的端口</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>从linux进入到docker中的容器的命令是</p><p>其中mysql是容器的名称</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysql</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>进入docker中创建的MySQL的容器中后重置mysql8.0密码</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 进入mysql</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysql</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 先进入 mysql 数据库</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 指定加密方式重置密码</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root@&#39;%&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> identified</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> with</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysql_native_password</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> by</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;root&#39;；</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ul>`,136),p=[n];function t(h,r,d,k,o,c){return a(),i("div",null,p)}const b=s(l,[["render",t]]);export{u as __pageData,b as default};
